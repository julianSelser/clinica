--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 8.0.856
--   Created On : viernes, 11 octubre, 2013 
--   DBMS       : SQL Server 2008 
--   -------------------------------------------------- 

USE [GD2C2013]
GO

BEGIN TRAN
GO
CREATE SCHEMA [CUATRO_QUESOS] AUTHORIZATION [gd]
GO

--  Create Tables 
CREATE TABLE CUATRO_QUESOS.Afiliados ( 
	Nro_Afiliado numeric(18) NOT NULL,
	Nombre varchar(255) NOT NULL,
	Apellido varchar(255) NOT NULL,
	Sexo char(1) NOT NULL,
	Tipo_Doc varchar(3) NOT NULL,
	Nro_Doc numeric(18) NOT NULL,
	Direccion varchar(255) NOT NULL,
	Mail varchar(255),
	Telefono numeric(18) NOT NULL,
	Fecha_Nac datetime NOT NULL,
	Cod_Plan numeric(18) NOT NULL,
	Estado_Civil varchar(255) NOT NULL,
	Nro_Titular numeric(18),
	Nro_Conyuge numeric(18),
	Fecha_Baja datetime,
	Nro_Consulta int
)
;

CREATE TABLE CUATRO_QUESOS.Bonos ( 
	Numero numeric(18) NOT NULL,
	Fecha_Impresion datetime NOT NULL,
	Nro_Afiliado numeric(18) NOT NULL,
	Cod_Plan numeric(18) NOT NULL,
	Id_Compra numeric(18),
	Tipo_Bono varchar(255) NOT NULL,
	Fecha_Vencimiento datetime,
	Nro_Consulta int,
	Nro_Usuario numeric(18)
)
;

CREATE TABLE CUATRO_QUESOS.Cambios_Plan ( 
	Nro_Afiliado numeric(18) NOT NULL,
	Fecha datetime NOT NULL,
	Plan_Origen numeric(18) NOT NULL,
	Plan_Destino numeric(18) NOT NULL,
	Motivo varchar(255)
)
;

CREATE TABLE CUATRO_QUESOS.Cancelaciones ( 
	Nro_Turno numeric(18) NOT NULL,
	Tipo varchar(255) NOT NULL,
	Motivo varchar(255)
)
;

CREATE TABLE CUATRO_QUESOS.Compra ( 
	Id_Compra numeric(18) NOT NULL,
	Nro_Afiliado numeric(18) NOT NULL,
	Fecha datetime NOT NULL,
	Cantidad_Comprada_Consulta numeric(18),
	Cantidad_Comprada_Farmacia numeric(18),
	Monto numeric(18) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Consultas ( 
	Id_Consulta numeric(18) NOT NULL,
	Nro_Turno numeric(18) NOT NULL,
	Fecha_Llegada datetime,
	Fecha_Atencion datetime,
	Sintomas varchar(255) NOT NULL,
	Enfermedades varchar(255) NOT NULL,
	Nro_Bono_Consulta numeric(18) NOT NULL,
	Tipo_Bono varchar(255) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Dias_Atencion ( 
	Id_Medico numeric(18) NOT NULL,
	Nombre_Dia varchar(9) NOT NULL,
	Hora_Desde time(4) NOT NULL,
	Hora_Hasta time(4) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Especialidades ( 
	Codigo numeric(18) NOT NULL,
	Descripcion varchar(255) NOT NULL,
	Tipo_Codigo numeric(18) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Especialidades_Medicos ( 
	Id_Medico numeric(18) NOT NULL,
	Cod_Especialidad numeric(18) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Funcionalidades ( 
	Id_Funcionalidad numeric(18) NOT NULL,
	Descripcion varchar(255)
)
;

CREATE TABLE CUATRO_QUESOS.Medicamentos ( 
	Id_Medicamento numeric(18) NOT NULL,
	Descripcion varchar(255) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Medicamentos_Por_Consulta ( 
	Id_Consulta numeric(18) NOT NULL,
	Id_Medicamento numeric(18) NOT NULL,
	Nro_Bono_Farmacia numeric(18) NOT NULL,
	Cantidad smallint NOT NULL,
	Tipo_Bono varchar(255)
)
;

CREATE TABLE CUATRO_QUESOS.Medicos ( 
	Id_Medico numeric(18) NOT NULL,
	Nombre varchar(255) NOT NULL,
	Apellido varchar(255) NOT NULL,
	Sexo varchar(255) NOT NULL,
	Tipo_Doc varchar(3) NOT NULL,
	Nro_Doc numeric(18) NOT NULL,
	Direccion varchar(255) NOT NULL,
	Telefono numeric(18) NOT NULL,
	Mail varchar(255) NOT NULL,
	Fecha_Nac datetime NOT NULL,
	Nro_Matricula numeric(18),
	Fecha_Atencion_Desde datetime NOT NULL,
	Fecha_Atencion_Hasta datetime NOT NULL,
	Habilitado bit NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Planes_Medicos ( 
	Codigo numeric(18) NOT NULL,
	Descripcion varchar(255) NOT NULL,
	Precio_Bono_Consulta numeric(18) NOT NULL,
	Precio_Bono_Farmacia numeric(18) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Roles ( 
	Id_Rol numeric(18) NOT NULL,
	Habilitado bit NOT NULL,
	Nombre varchar(50) NOT NULL,
	Descripcion varchar(50)
)
;

CREATE TABLE CUATRO_QUESOS.Roles_Por_Funcionalidades ( 
	Id_Rol numeric(18) NOT NULL,
	Id_Funcionalidad numeric(18) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Tipos_Especialidades ( 
	Codigo numeric(18) NOT NULL,
	Descripcion varchar(255) NOT NULL
)
;

CREATE TABLE CUATRO_QUESOS.Turnos ( 
	Numero numeric(18) NOT NULL,
	Fecha datetime NOT NULL,
	Nro_Afiliado numeric(18) NOT NULL,
	Id_Medico numeric(18) NOT NULL,
)
;

CREATE TABLE CUATRO_QUESOS.Usuarios ( 
	Username nvarchar(20) NOT NULL,
	Password nvarchar(255) NOT NULL,
	Intentos_Fallidos tinyint,
	Habilitado bit
)
;

CREATE TABLE CUATRO_QUESOS.Usuarios_Por_Rol ( 
	Username nvarchar(20) NOT NULL,
	Id_Rol numeric(18) NOT NULL
)
;


--  Create Primary Key Constraints 
ALTER TABLE CUATRO_QUESOS.Afiliados ADD CONSTRAINT PK_Afiliados 
	PRIMARY KEY CLUSTERED (Nro_Afiliado)
;

ALTER TABLE CUATRO_QUESOS.Bonos ADD CONSTRAINT PK_Bonos 
	PRIMARY KEY CLUSTERED (Numero, Tipo_Bono)
;

ALTER TABLE CUATRO_QUESOS.Cambios_Plan ADD CONSTRAINT PK_Cambios_Plan 
	PRIMARY KEY CLUSTERED (Nro_Afiliado, Fecha)
;

ALTER TABLE CUATRO_QUESOS.Cancelaciones ADD CONSTRAINT PK_Cancelaciones 
	PRIMARY KEY CLUSTERED (Nro_Turno)
;

ALTER TABLE CUATRO_QUESOS.Compra ADD CONSTRAINT PK_Compra 
	PRIMARY KEY CLUSTERED (Id_Compra)
;

ALTER TABLE CUATRO_QUESOS.Consultas ADD CONSTRAINT PK_Consultas 
	PRIMARY KEY CLUSTERED (Id_Consulta)
;

ALTER TABLE CUATRO_QUESOS.Dias_Atencion ADD CONSTRAINT PK_Dias_Atencion 
	PRIMARY KEY CLUSTERED (Id_Medico, Nombre_Dia)
;

ALTER TABLE CUATRO_QUESOS.Especialidades ADD CONSTRAINT PK_Especialidades 
	PRIMARY KEY CLUSTERED (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Especialidades_Medicos ADD CONSTRAINT PK_Especialidades_Medicos 
	PRIMARY KEY CLUSTERED (Id_Medico, Cod_Especialidad)
;

ALTER TABLE CUATRO_QUESOS.Funcionalidades ADD CONSTRAINT PK_Funcionalidades 
	PRIMARY KEY CLUSTERED (Id_Funcionalidad)
;

ALTER TABLE CUATRO_QUESOS.Medicamentos ADD CONSTRAINT PK_Medicamentos 
	PRIMARY KEY CLUSTERED (Id_Medicamento)
;

ALTER TABLE CUATRO_QUESOS.Medicamentos_Por_Consulta ADD CONSTRAINT PK_Medicamentos_Por_Consulta 
	PRIMARY KEY CLUSTERED (Id_Consulta, Id_Medicamento, Nro_Bono_Farmacia)
;

ALTER TABLE CUATRO_QUESOS.Medicos ADD CONSTRAINT PK_Medicos 
	PRIMARY KEY CLUSTERED (Id_Medico)
;

ALTER TABLE CUATRO_QUESOS.Planes_Medicos ADD CONSTRAINT PK_Planes_Medicos 
	PRIMARY KEY CLUSTERED (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Roles ADD CONSTRAINT PK_Roles 
	PRIMARY KEY CLUSTERED (Id_Rol)
;

ALTER TABLE CUATRO_QUESOS.Roles_Por_Funcionalidades ADD CONSTRAINT PK_Roles_Por_Funcionalidades 
	PRIMARY KEY CLUSTERED (Id_Rol, Id_Funcionalidad)
;

ALTER TABLE CUATRO_QUESOS.Tipos_Especialidades ADD CONSTRAINT PK_Tipos_Especialidades 
	PRIMARY KEY CLUSTERED (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Turnos ADD CONSTRAINT PK_Turnos 
	PRIMARY KEY CLUSTERED (Numero)
;

ALTER TABLE CUATRO_QUESOS.Usuarios ADD CONSTRAINT PK_Usuarios 
	PRIMARY KEY CLUSTERED (Username)
;

ALTER TABLE CUATRO_QUESOS.Usuarios_Por_Rol ADD CONSTRAINT PK_Usuarios_Por_Rol 
	PRIMARY KEY CLUSTERED (Username, Id_Rol)
;



--  Create Foreign Key Constraints 
ALTER TABLE CUATRO_QUESOS.Afiliados ADD CONSTRAINT FK_Afiliados_Planes 
	FOREIGN KEY (Cod_Plan) REFERENCES CUATRO_QUESOS.Planes_Medicos (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Afiliados ADD CONSTRAINT FK_Nro_Conyuge 
	FOREIGN KEY (Nro_Conyuge) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
;

ALTER TABLE CUATRO_QUESOS.Afiliados ADD CONSTRAINT FK_Nro_Titular 
	FOREIGN KEY (Nro_Titular) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
;

ALTER TABLE CUATRO_QUESOS.Bonos ADD CONSTRAINT FK_Bonos_Afiliados 
	FOREIGN KEY (Nro_Afiliado) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Bonos ADD CONSTRAINT FK_Bonos_Usuarios
	FOREIGN KEY (Nro_Usuario) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
	ON UPDATE NO ACTION --no entiendo por qué no me deja cascadear este también
;


ALTER TABLE CUATRO_QUESOS.Bonos ADD CONSTRAINT FK_Bonos_Compra 
	FOREIGN KEY (Id_Compra) REFERENCES CUATRO_QUESOS.Compra (Id_Compra)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Bonos ADD CONSTRAINT FK_Bonos_Planes_Medicos 
	FOREIGN KEY (Cod_Plan) REFERENCES CUATRO_QUESOS.Planes_Medicos (Codigo)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Cambios_Plan ADD CONSTRAINT FK_Afiliado 
	FOREIGN KEY (Nro_Afiliado) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Cambios_Plan ADD CONSTRAINT FK_Plan_Destino 
	FOREIGN KEY (Plan_Destino) REFERENCES CUATRO_QUESOS.Planes_Medicos (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Cambios_Plan ADD CONSTRAINT FK_Plan_Origen 
	FOREIGN KEY (Plan_Origen) REFERENCES CUATRO_QUESOS.Planes_Medicos (Codigo)
;

ALTER TABLE CUATRO_QUESOS.Cancelaciones ADD CONSTRAINT FK_Cancelaciones_Turnos 
	FOREIGN KEY (Nro_Turno) REFERENCES CUATRO_QUESOS.Turnos (Numero)
;

ALTER TABLE CUATRO_QUESOS.Compra ADD CONSTRAINT FK_Compra_Afiliados 
	FOREIGN KEY (Nro_Afiliado) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
;

ALTER TABLE CUATRO_QUESOS.Consultas ADD CONSTRAINT FK_Consultas_Turnos 
	FOREIGN KEY (Nro_Turno) REFERENCES CUATRO_QUESOS.Turnos (Numero)
;

ALTER TABLE CUATRO_QUESOS.Consultas ADD CONSTRAINT FK_Bonos_Consultas
	FOREIGN KEY (Nro_Bono_Consulta, Tipo_Bono) REFERENCES CUATRO_QUESOS.Bonos (Numero, Tipo_Bono)
;

ALTER TABLE CUATRO_QUESOS.Dias_Atencion ADD CONSTRAINT FK_Dias_Atencion_Medicos 
	FOREIGN KEY (Id_Medico) REFERENCES CUATRO_QUESOS.Medicos (Id_Medico)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Especialidades ADD CONSTRAINT FK_Especialidades_Tipos_Especialidades 
	FOREIGN KEY (Tipo_Codigo) REFERENCES CUATRO_QUESOS.Tipos_Especialidades (Codigo)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Especialidades_Medicos ADD CONSTRAINT FK_Especialidades_Medicos_Especialidades 
	FOREIGN KEY (Cod_Especialidad) REFERENCES CUATRO_QUESOS.Especialidades (Codigo)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Especialidades_Medicos ADD CONSTRAINT FK_Especialidades_Medicos_Medicos 
	FOREIGN KEY (Id_Medico) REFERENCES CUATRO_QUESOS.Medicos (Id_Medico)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Medicamentos_Por_Consulta ADD CONSTRAINT FK_Bonos_Por_Consulta 
	FOREIGN KEY (Nro_Bono_Farmacia, Tipo_Bono) REFERENCES CUATRO_QUESOS.Bonos (Numero, Tipo_Bono)
;

ALTER TABLE CUATRO_QUESOS.Medicamentos_Por_Consulta ADD CONSTRAINT FK_Medicamentos_Por_Consulta_Consultas 
	FOREIGN KEY (Id_Consulta) REFERENCES CUATRO_QUESOS.Consultas (Id_Consulta)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Medicamentos_Por_Consulta ADD CONSTRAINT FK_Medicamentos_Por_Consulta_Medicamentos 
	FOREIGN KEY (Id_Medicamento) REFERENCES CUATRO_QUESOS.Medicamentos (Id_Medicamento)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Roles_Por_Funcionalidades ADD CONSTRAINT FK_Roles_Por_Funcionalidades_Funcionalidades 
	FOREIGN KEY (Id_Funcionalidad) REFERENCES CUATRO_QUESOS.Funcionalidades (Id_Funcionalidad)
	ON DELETE CASCADE ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Roles_Por_Funcionalidades ADD CONSTRAINT FK_Roles_Por_Funcionalidades_Roles 
	FOREIGN KEY (Id_Rol) REFERENCES CUATRO_QUESOS.Roles (Id_Rol)
	ON DELETE CASCADE ON UPDATE CASCADE
;


ALTER TABLE CUATRO_QUESOS.Turnos ADD CONSTRAINT FK_Turnos_Afiliados 
	FOREIGN KEY (Nro_Afiliado) REFERENCES CUATRO_QUESOS.Afiliados (Nro_Afiliado)
;

ALTER TABLE CUATRO_QUESOS.Turnos ADD CONSTRAINT FK_Turnos_Medicos 
	FOREIGN KEY (Id_Medico) REFERENCES CUATRO_QUESOS.Medicos (Id_Medico)
	ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Usuarios_Por_Rol ADD CONSTRAINT FK_Usuarios_Por_Rol_Roles 
	FOREIGN KEY (Id_Rol) REFERENCES CUATRO_QUESOS.Roles (Id_Rol)
	ON DELETE CASCADE ON UPDATE CASCADE
;

ALTER TABLE CUATRO_QUESOS.Usuarios_Por_Rol ADD CONSTRAINT FK_Usuarios_Por_Rol_Usuarios 
	FOREIGN KEY (Username) REFERENCES CUATRO_QUESOS.Usuarios (Username)
	ON DELETE CASCADE ON UPDATE CASCADE
;


/* ****** Migrar datos existentes ******* */

--Planes medicos

INSERT INTO CUATRO_QUESOS.Planes_Medicos
	(
	Codigo,
	Descripcion,
	Precio_Bono_Consulta,
	Precio_Bono_Farmacia
	)
	
	select distinct Plan_Med_Codigo as Codigo,
		Plan_Med_Descripcion as Descripcion,
		Plan_Med_Precio_Bono_Consulta as Precio_Bono_Consulta,
		Plan_Med_Precio_Bono_Farmacia as Precio_Bono_Farmacia
		
	from gd_esquema.Maestra

--Afiliados

INSERT INTO CUATRO_QUESOS.Afiliados
	(
	Nro_Afiliado,
	Nombre,
	Apellido,
	Sexo,
	Tipo_Doc,
	Nro_Doc,
	Direccion,
	Telefono,
	Mail,
	Fecha_Nac,
	Cod_Plan,
	Estado_Civil,
	Nro_Titular,
	Nro_Conyuge,
	Fecha_Baja,
	Nro_Consulta
	)
	
	select (row_number() over(order by paciente_dni))*100 as Nro_afiliado, --hasta ahora son todos titulares
	Paciente_Nombre as Nombre, 
	Paciente_Apellido as Apellido,
	'-' as Sexo, --indefinido o migrado
	'DNI' as Tipo_Doc, --como la columna de la maestra dice DNI, asumo que todos los documentos existentes son DNI
	Paciente_Dni as Nro_Doc, 
	Paciente_Direccion as Direccion,
	Paciente_Telefono as Telefono,
	Paciente_Mail as Mail,
	Paciente_Fecha_Nac as Fecha_Nac, 
	Plan_Med_Codigo as Cod_Plan,
	'Soltero' as Estado_Civil, --presumido
	(row_number() over(order by paciente_dni))*100 as Nro_Titular, --es el titular
	NULL as Nro_Conyuge, --nadie tiene conyuge
	NULL as Fecha_Baja, --asumo que los socios dados están activos
	0 as Nro_Consulta --cantidad de consultas que lleva hechas (0 porque es desde la migracion - estara bien asi?)	

	from 
		(select distinct Paciente_Nombre, Paciente_Apellido, Paciente_Direccion, Paciente_Dni, Paciente_Telefono, Paciente_Fecha_Nac, Paciente_Mail, Plan_Med_Codigo
		from gd_esquema.Maestra) as subtabla


--Medicamentos

INSERT INTO CUATRO_QUESOS.Medicamentos
	(
	Id_Medicamento,
	Descripcion
	)

	select (ROW_NUMBER() over (order by Bono_Farmacia_Medicamento)) as ID_Medicamento,
		Bono_Farmacia_Medicamento as Descripcion

	from (select distinct Bono_Farmacia_Medicamento
		from gd_esquema.Maestra
		where Bono_Farmacia_Medicamento is not null) as subtabla

--Tipos de especialidades médicas

INSERT INTO CUATRO_QUESOS.Tipos_Especialidades
	(
	Codigo,
	Descripcion
	)
	
	select distinct Tipo_Especialidad_Codigo as Codigo,
		Tipo_Especialidad_Descripcion as Descripcion
		
	from gd_esquema.Maestra
	where Tipo_Especialidad_Codigo is not null



--Especialidades médicas

INSERT INTO CUATRO_QUESOS.Especialidades
	(
	Codigo,
	Descripcion,
	Tipo_Codigo
	)
	
	select distinct Especialidad_Codigo as Codigo, 
		Especialidad_Descripcion as Descripcion,
		Tipo_Especialidad_Codigo as Tipo_Codigo
	
	from gd_esquema.Maestra 
	where Especialidad_Codigo is not null






--Medicos

INSERT INTO CUATRO_QUESOS.Medicos
	(
	ID_Medico,
	Nombre,
	Apellido,
	Sexo,
	Tipo_Doc,
	Nro_Doc,
	Direccion,
	Telefono,
	Mail,
	Fecha_Nac,
	Nro_Matricula,
	Fecha_Atencion_Desde,
	Fecha_Atencion_Hasta,
	Habilitado
	)
	
	select (row_number() over(order by Medico_DNI)) as ID_Medico,
		Medico_Nombre as Nombre,
		Medico_Apellido as Apellido,
		'-' as Sexo, --indefinido
		'DNI' as Tipo_Doc, --como la columna de la maestra dice DNI, asumo que todos los documentos existentes son DNI
		Medico_Dni as Nro_Doc,
		Medico_Direccion as Direccion,
		Medico_Telefono as Telefono,
		Medico_Mail as Mail,
		Medico_Fecha_Nac as Fecha_Nac,
		0 as Nro_Matricula, --indefinido
		getdate() as Fecha_Atencion_Desde,
		case when (MAX(Turno_Fecha) > dateadd(month, 1, GETDATE()) then MAX(Turno_fecha) else dateadd(month, 1, GETDATE()) end as Fecha_Atencion_Hasta, --esto significa que el medico esta disponible al menos durante un mes desde la migración, pero si tiene turnos posteriores se estira hasta ese momento
		1 as Habilitado --asumo que los medicos existentes están todos activos
		
		
	from gd_esquema.Maestra
	where Medico_Dni is not null
	group by Medico_Dni, 
		Medico_Nombre, 
		Medico_Apellido, 
		Medico_Direccion,
		Medico_Telefono,
		Medico_Mail,
		Medico_Fecha_Nac


/*NOTA: ACA EMPIEZA LA PARTE DE LOS BONOS. */
		
--Bonos consulta
INSERT INTO CUATRO_QUESOS.Bonos
	(
	Numero,
	Fecha_Impresion,
	Nro_Afiliado,
	Cod_Plan,
	ID_Compra,
	Tipo_Bono,
	Fecha_Vencimiento,
	Nro_Consulta,
	Nro_Usuario
	)
	
	select distinct Bono_Consulta_Numero as Numero,
		Bono_Consulta_Fecha_Impresion as Fecha_Impresion,
		(select Nro_Afiliado from CUATRO_QUESOS.Afiliados where Nro_Doc = Paciente_DNI) as Nro_Afiliado,
		Plan_Med_Codigo as Cod_Plan,
		NULL as ID_Compra, --no se tienen datos de las compras anteriores a la migración
		'Consulta' as Tipo_Bono,
		NULL as Fecha_Vencimiento, --no aplica para bonos consulta
		
		--lo que sigue es para calcular el campo nro_consulta (se anota en el bono cuantas veces se atendio ESE afiliado)
		case (select COUNT(*) from gd_esquema.Maestra as sub1 where Turno_Numero is not null and sub1.Bono_Consulta_Numero = principal.Bono_Consulta_Numero) --esta columna cambia según si para este bono hubo turno asociado (consulta concretada) o no
		when 0 then NULL --si no hubo consulta el nro_consulta es null
		else --si hubo consulta hay que calcular nro_consulta
		(select COUNT(*) --para obtener el nro_consulta de ese paciente tengo que contar....
			from gd_esquema.Maestra submaestra --usando una tabla auxiliar
			where principal.Paciente_Dni = submaestra.Paciente_Dni --para ese afiliado
				and submaestra.Bono_Consulta_Numero <= principal.Bono_Consulta_Numero --cuantos bonos menores o iguales a este bono existen
				and submaestra.Turno_Numero is not null) --y que hayan sido usados en una consulta (sabemos que se usaron cuando se asocian a un turno)
		 end as Nro_Consulta,
		 
		 --lo que sigue es para determinar el usuario. Si se concretó el turno, asumo que el usuario es el mismo que lo compró, si no se concretó el usuario es NULL
		case (select COUNT(*) from gd_esquema.Maestra as sub1 where Turno_Numero is not null and sub1.Bono_Consulta_Numero = principal.Bono_Consulta_Numero) 
		when 0 then NULL --si no hubo consulta el nro_consulta es null
		else
			(select Nro_Afiliado from CUATRO_QUESOS.Afiliados where Nro_Doc = Paciente_DNI)
		end as Nro_Usuario


	from gd_esquema.Maestra as principal
	where Bono_Consulta_Numero is not null
		and Compra_Bono_Fecha is not null
		
		

		
--Bonos farmacia
INSERT INTO CUATRO_QUESOS.Bonos
	(
	Numero,
	Fecha_Impresion,
	Nro_Afiliado,
	Cod_Plan,
	ID_Compra,
	Tipo_Bono,
	Fecha_Vencimiento,
	Nro_Consulta,
	Nro_Usuario
	)
	--este es bastante straightforward comparado con el de bonos consulta
	select distinct Bono_Farmacia_Numero as Numero,
		Bono_Farmacia_Fecha_Impresion as Fecha_Impresion,
		(select Nro_Afiliado from CUATRO_QUESOS.Afiliados where Nro_Doc = Paciente_DNI) as Nro_Afiliado,
		Plan_Med_Codigo as Cod_Plan,
		NULL as ID_Compra,
		'Farmacia' as Tipo_Bono,
		Bono_Farmacia_Fecha_Vencimiento as Fecha_Vencimiento,
		NULL as Nro_Consulta, --no aplica para bonos farmacia
		--lo que sigue es para determinar el usuario. Si se usó, asumo que el usuario es el mismo que lo compró, si no se usó el usuario es NULL
		case (select COUNT(*) from gd_esquema.Maestra as sub1 where Bono_Farmacia_Medicamento is not null and sub1.Bono_Farmacia_Numero = principal.Bono_Farmacia_Numero) --claramente un bono farmacia usado es el que tiene un medicamento escrito
		when 0 then NULL --si no hubo se usó el nro_consulta es null
		else
			(select Nro_Afiliado from CUATRO_QUESOS.Afiliados where Nro_Doc = Paciente_DNI)
		end as Nro_Usuario
		
		

from gd_esquema.Maestra as principal
where Bono_Farmacia_Numero is not null 

/* *************FIN INSERCION DE BONOS*************** */





COMMIT
